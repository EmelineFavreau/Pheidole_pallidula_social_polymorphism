#!/bin/env bash
############################################################################
##
## Original
## Author: Joe Colgan                      Name: run_magic_blast.sh
##
## Date: 2018/12/30
##
## Purpose:
## This script takes two fastq files as input from the command line.
## The script also takes an indexed-reference genome.
## The output files are two tab-delimited text files:
## 1) Contains raw blast alignment information generated by magic blast.
## 2) The top species match.
##
#############################################################################

## updated to work in my home (Emeline Favreau)
# changelog: 
# changed the path to magic blast
# chnaged the way output is created to reflect my sample name structure


## Take input from the command line:
reference=$1
input_forward=$2
input_reverse=$3
output1="$(echo "$input_forward" | cut -d '/' -f 2 | cut -d '.' -f 1 - )"
output2="result/"
output3="$output2$output1"
threads='20'

## Check arguments exist:
if [ $# -eq 0 ]
  then
    echo "No arguments supplied"
    echo "usage: ./run_magic_blast.sh reference forward_pair reverse_pair"
    exit -1
fi

## Generate index for blast databse:
/data/home/btx077/bin/ncbi-magicblast-1.4.0/bin/makeblastdb \
-in "$reference" -dbtype nucl -parse_seqids

## Print to console:
echo 'Step One: Running magic-blast'

## Run magic-blast:
/data/home/btx077/bin/ncbi-magicblast-1.4.0/bin/magicblast \
-db "$reference" \
-query "$input_forward" \
-query_mate "$input_reverse" \
-infmt fastq \
-out "$output3".tab \
-outfmt tabular  \
-num_threads "$threads" \
-no_unaligned

## Print to console:
echo 'Step One: Running magic-blast - complete'

## Filter by top matches:
# # get all Alignment composite scores | sort them by first field position only, based on numerical value (n), larger value first (r) | obtain top one
top_bitscore="$(cut -f 13 "$output3".tab | sort -k1,1nr - | head -n 1 - )"

## Filter by top matches:
awk '$3=="100"' "$output3".tab | awk '$13=='$top_bitscore'' - | cut -f 2 - | sort | uniq -c | sort -k1,1nr - > "$output3".species.text
head -n 1 "$output3".species.text
